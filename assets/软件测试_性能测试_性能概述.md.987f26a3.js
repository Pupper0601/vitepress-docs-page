import{_ as a,o as l,c as i,Q as e}from"./chunks/framework.1b72a0e7.js";const _=JSON.parse('{"title":"一、性能测试概述","description":"","frontmatter":{},"headers":[],"relativePath":"软件测试/性能测试/性能概述.md","lastUpdated":1699952033000}'),r={name:"软件测试/性能测试/性能概述.md"},t=e('<h1 id="一、性能测试概述" tabindex="-1">一、性能测试概述 <a class="header-anchor" href="#一、性能测试概述" aria-label="Permalink to &quot;一、性能测试概述&quot;">​</a></h1><h2 id="一、-什么是性能测试" tabindex="-1">一、 什么是性能测试？ <a class="header-anchor" href="#一、-什么是性能测试" aria-label="Permalink to &quot;一、 什么是性能测试？&quot;">​</a></h2><ul><li>通过工具，找出或获得系统在不同工况下的性能指标值</li><li>性能测试过程中，重点是**找出****性能指标**，而不再是找出 Bug，</li><li>性能测试的产出绝对不只是 Bug</li></ul><h4 id="案例" tabindex="-1">案例： <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例：&quot;">​</a></h4><p>跑步 100 米，用时多少？运动员的心跳、步伐频率是多少？</p><ol><li>跑步 100 米：业务场景</li><li>用时多少：响应时间</li><li>运动员的心跳、步伐：性能指标值</li></ol><p>性能指标值和响应时间是否满足当前业务场景的最低要求（合格线）</p><h2 id="二、-获取基准值" tabindex="-1">二、 获取基准值 <a class="header-anchor" href="#二、-获取基准值" aria-label="Permalink to &quot;二、 获取基准值&quot;">​</a></h2><h4 id="假设当前有一个业务" tabindex="-1">假设当前有一个业务 <a class="header-anchor" href="#假设当前有一个业务" aria-label="Permalink to &quot;假设当前有一个业务&quot;">​</a></h4><p>电商系统，下单业务，目前还不知道系统支持多少人同时下单，那么我们需要找到服务器能正常支持多少人同时下单</p><h4 id="性能测试初始阶段-第一次做" tabindex="-1">性能测试初始阶段（第一次做） <a class="header-anchor" href="#性能测试初始阶段-第一次做" aria-label="Permalink to &quot;性能测试初始阶段（第一次做）&quot;">​</a></h4><ul><li>先把基础的性能指标值找出来**（第一次性能测试也叫做基准测试）**</li><li>比如：100 个人同时下单系统正常，但 120 个人同时下单就会出现部分请求的响应时间超长，连接异常</li><li>那么 100-120 范围内的某个值就是当前服务器能达到的性能指标值**（基准值）**</li></ul><h4 id="版本迭代-进行第二次做性能测试-重新跑一遍之前的性能脚本" tabindex="-1">版本迭代，进行第二次做性能测试，重新跑一遍之前的性能脚本 <a class="header-anchor" href="#版本迭代-进行第二次做性能测试-重新跑一遍之前的性能脚本" aria-label="Permalink to &quot;版本迭代，进行第二次做性能测试，重新跑一遍之前的性能脚本&quot;">​</a></h4><ul><li>又会得到一些性能指标值，对比上个版本的<strong>性能指标值</strong>，看是否有优化（性能变化）</li><li>假设这个时候 120 个人同时下单是正常的，150 个人才有异常，那么接口已经有优化了</li></ul><h4 id="假设公司是从-0-开始做性能测试" tabindex="-1">假设公司是从 0 开始做性能测试 <a class="header-anchor" href="#假设公司是从-0-开始做性能测试" aria-label="Permalink to &quot;假设公司是从 0 开始做性能测试&quot;">​</a></h4><ul><li>第一阶段：做好性能测试，得到性能指标值</li><li>第二阶段：假设性能比之前差，哪些性能指标值不满足预期值，就需要分析是哪里有问题</li></ul><h2 id="三、-负载测试-和-压力测试" tabindex="-1">三、 负载测试 和 压力测试 <a class="header-anchor" href="#三、-负载测试-和-压力测试" aria-label="Permalink to &quot;三、 负载测试 和 压力测试&quot;">​</a></h2><h3 id="_1-概念" tabindex="-1">1. 概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1. 概念&quot;">​</a></h3><ul><li><p><strong>负载测试</strong></p></li><li><ul><li><strong>逐步增加</strong> 系统负载（增加“用户数”），测试系统性能变化，并最终确定系统所能承受的最大负载量</li><li>**通俗理解：**看看你几斤几两</li></ul></li><li><p><strong>压力测试</strong></p></li><li><ul><li>在较大的性能压力下，持续运行一个比较长的时间，看看系统服务是否正常及系统资源的利用率情况</li><li>**通俗理解：**鸭梨山大！</li><li>**关键字：**较大压力 + 较长时间</li><li>**注意：**不是满负荷压力哦</li></ul></li></ul><h3 id="_2-场景" tabindex="-1">2. 场景 <a class="header-anchor" href="#_2-场景" aria-label="Permalink to &quot;2. 场景&quot;">​</a></h3><ul><li><p><strong>负载测试</strong></p></li><li><ul><li>有一个业务，增加到 40 个人的时候，服务器还能正常使用，没有异常</li><li>当你增加到 50 个人的时候，服务器已经开始有异常了，那么就能确定 40-50 之间某个值就是系统所能承受的最大负载量**【出现性能拐点，找到了服务器性能瓶颈的范围值】**</li><li>最后减小加压梯度（比如：从 40 个人开始每次增加 1 个人、2 个人），确认最大负载量**【确认性能拐点】**</li></ul></li><li><p><strong>压力测试</strong></p></li><li><ul><li>**问：**大家什么时候会觉得工作压力大？</li><li>**答：**996、007；因为你不会觉得 955 压力山大吧</li><li>**结论：**所以在我们日常工作中，长时间工作强度高，才会觉得压力大；如果你一周就加班一天也说压力大...（那就别干这一行了）</li></ul></li></ul><h3 id="_3-压力测试持续运行时间要多久" tabindex="-1">3. 压力测试持续运行时间要多久？ <a class="header-anchor" href="#_3-压力测试持续运行时间要多久" aria-label="Permalink to &quot;3. 压力测试持续运行时间要多久？&quot;">​</a></h3><ul><li>标准性能测试里面，一般是<strong>7*24</strong>小时，或者是它的倍数</li><li>但是实际工作中，并不会这么久，否则成本太高</li><li>所以会以<strong>小时为单位</strong>，比如：4 个小时、8 个小时...晚上下班之后做，第二天早上上班看结果</li></ul><h3 id="_4-先负载测试还是压力测试" tabindex="-1">4. 先负载测试还是压力测试？ <a class="header-anchor" href="#_4-先负载测试还是压力测试" aria-label="Permalink to &quot;4. 先负载测试还是压力测试？&quot;">​</a></h3><ul><li>先负载测试</li><li>负载测试可以找到服务器性能瓶颈的范围值，若生产环境中系统稳定性较差，再做压力测试</li><li>所以<strong>压力测试是可做可不做的</strong></li></ul><h2 id="四、-性能测试步骤" tabindex="-1">四、 性能测试步骤 <a class="header-anchor" href="#四、-性能测试步骤" aria-label="Permalink to &quot;四、 性能测试步骤&quot;">​</a></h2><h3 id="_1-性能测试准备" tabindex="-1">1. 性能测试准备 <a class="header-anchor" href="#_1-性能测试准备" aria-label="Permalink to &quot;1. 性能测试准备&quot;">​</a></h3><ul><li>**需求分析，熟悉业务：**确定需要重点关注的点，如 TPS、响应时间（确定需要收集的性能测试指标值）</li><li>明确性能测试目标（预期性能指标值）和测试范围</li><li>了解软件功能、架构</li><li>制定测试方案、测试计划，做好工作量评估</li><li>**制定测试模型（编辑测试用例）：**比如负载测试，场景要如何设计</li></ul><h3 id="_2-搭建性能测试环境" tabindex="-1">2. 搭建性能测试环境 <a class="header-anchor" href="#_2-搭建性能测试环境" aria-label="Permalink to &quot;2. 搭建性能测试环境&quot;">​</a></h3><ul><li>**技术准备：**选择性能测试工具；测试方案中涉及到的技术问题；测试数据的收集方案实现；如何监控系统资源</li><li>被测系统环境搭建（服务器、服务版本更新、数据库数据准备）</li><li>网络配置</li><li>创建初始数据，如：测试账号（预估并发量）</li></ul><h3 id="_3-性能测试脚本开发" tabindex="-1">3. 性能测试脚本开发 <a class="header-anchor" href="#_3-性能测试脚本开发" aria-label="Permalink to &quot;3. 性能测试脚本开发&quot;">​</a></h3><ul><li>选取协议</li><li>制作脚本</li><li>调试脚本</li><li>验证脚本</li></ul><h3 id="_4-性能测试执行" tabindex="-1">4. 性能测试执行 <a class="header-anchor" href="#_4-性能测试执行" aria-label="Permalink to &quot;4. 性能测试执行&quot;">​</a></h3><p>真正开始对服务器进行性能测试</p><ul><li>试运行</li><li>场景执行</li><li>收集并整理测试数据</li></ul><h3 id="_5-性能测试结果分析与调优" tabindex="-1">5. 性能测试结果分析与调优 <a class="header-anchor" href="#_5-性能测试结果分析与调优" aria-label="Permalink to &quot;5. 性能测试结果分析与调优&quot;">​</a></h3><ul><li>**分析依据：**结果图表</li><li>**分析思路：**服务器硬件瓶颈&gt;网络瓶颈&gt;服务器 os 瓶颈（参数配置、数据库、web 服务器）&gt;应用瓶颈（sql 语句、数据库设计、业务逻辑、算法）</li><li>调优</li><li>修改脚本或场景</li><li>性能回归，和之前的测试数据进行对比，是否有优化</li></ul><h3 id="_7-性能测试报告与结果跟踪" tabindex="-1">7. 性能测试报告与结果跟踪 <a class="header-anchor" href="#_7-性能测试报告与结果跟踪" aria-label="Permalink to &quot;7. 性能测试报告与结果跟踪&quot;">​</a></h3><ul><li>**性能测试报告：**整理调优前后的测试数据</li><li>性能测试问题跟踪</li><li>构建持久化的性能监听平台，监听线上服务器的系统资源</li></ul><h2 id="五、-性能指标" tabindex="-1">五、 性能指标 <a class="header-anchor" href="#五、-性能指标" aria-label="Permalink to &quot;五、 性能指标&quot;">​</a></h2><h3 id="_1-并发用户数-重点" tabindex="-1">1. 并发用户数（重点） <a class="header-anchor" href="#_1-并发用户数-重点" aria-label="Permalink to &quot;1. 并发用户数（重点）&quot;">​</a></h3><ul><li>同一时间点，发出请求的用户数，一个用户可以发出多个请求</li><li>场景不一定是同一个</li><li>和 CPU、响应时间有关系</li></ul><h4 id="和并发的关系" tabindex="-1">和并发的关系 <a class="header-anchor" href="#和并发的关系" aria-label="Permalink to &quot;和并发的关系&quot;">​</a></h4><p>假设有 10 个用户数，每个用户同一时间点内发起 2 个请求，那么服务器收到的请求并发数就是 20</p><h3 id="_2-响应时间-respose-time" tabindex="-1">2. 响应时间（Respose Time） <a class="header-anchor" href="#_2-响应时间-respose-time" aria-label="Permalink to &quot;2. 响应时间（Respose Time）&quot;">​</a></h3><h4 id="响应时间对于性能测试来说" tabindex="-1">响应时间对于性能测试来说 <a class="header-anchor" href="#响应时间对于性能测试来说" aria-label="Permalink to &quot;响应时间对于性能测试来说&quot;">​</a></h4><ul><li>从发起请求到收到请求响应的时间</li><li>**包含了：**Request Time 和 Response Time</li><li>**等价于：**发起请求网络传输时间 + 服务器处理时间 + 数据库系统处理时间 + 返回响应网络传输时间</li></ul><h4 id="对用户所感知的响应时间包括" tabindex="-1">对用户所感知的响应时间包括 <a class="header-anchor" href="#对用户所感知的响应时间包括" aria-label="Permalink to &quot;对用户所感知的响应时间包括&quot;">​</a></h4><ul><li>用户客户端渲染时间（多了这个）</li><li>请求/响应数据网络传输时间</li><li>应用服务器处理时间</li><li>数据库系统处理时间</li></ul><h3 id="_3-tps-transaction-per-second-最主要的指标" tabindex="-1">3. TPS（Transaction Per Second，最主要的指标） <a class="header-anchor" href="#_3-tps-transaction-per-second-最主要的指标" aria-label="Permalink to &quot;3. TPS（Transaction Per Second，最主要的指标）&quot;">​</a></h3><p>服务器每秒处理事务数，衡量服务器处理能力的最主要指标</p><h4 id="知道-t-是如何定义的" tabindex="-1">知道 T 是如何定义的 <a class="header-anchor" href="#知道-t-是如何定义的" aria-label="Permalink to &quot;知道 T 是如何定义的&quot;">​</a></h4><ul><li>在不同的行业、业务中，<strong>TPS 定义的颗粒度</strong>可能是不同的</li><li>所以不管什么情况下，需要做性能测试的<strong>业务的相关方</strong>都要知道你的 <strong>T 是如何定义的</strong></li></ul><h4 id="定义-tps-的粒度" tabindex="-1">定义 TPS 的粒度 <a class="header-anchor" href="#定义-tps-的粒度" aria-label="Permalink to &quot;定义 TPS 的粒度&quot;">​</a></h4><ul><li>一般会**根据****场景的目的**来定义 TPS 的粒度</li><li>接口层性能测试：T 可以定义为接口级</li><li>业务级性能测试：T 可以定义为每个业务步骤和完整的业务流</li></ul><h3 id="_4-rps-request-per-second" tabindex="-1">4. RPS（Request per Second） <a class="header-anchor" href="#_4-rps-request-per-second" aria-label="Permalink to &quot;4. RPS（Request per Second）&quot;">​</a></h3><h4 id="简单理解" tabindex="-1">简单理解 <a class="header-anchor" href="#简单理解" aria-label="Permalink to &quot;简单理解&quot;">​</a></h4><p>每秒请求数，用户从客户端发起的请求数</p><h3 id="_5-吞吐量-throughput" tabindex="-1">5. 吞吐量（Throughput） <a class="header-anchor" href="#_5-吞吐量-throughput" aria-label="Permalink to &quot;5. 吞吐量（Throughput）&quot;">​</a></h3><p>单位时间内，网络处理的请求数量（事务/s）</p><p>网络没有瓶颈时，吞吐量 ≈TPS</p><h3 id="_6-吞吐率" tabindex="-1">6. 吞吐率 <a class="header-anchor" href="#_6-吞吐率" aria-label="Permalink to &quot;6. 吞吐率&quot;">​</a></h3><p>单位时间内，在网络传输的数据量的平均速率（kB/s）</p><h3 id="_7-资源利用率" tabindex="-1">7. 资源利用率 <a class="header-anchor" href="#_7-资源利用率" aria-label="Permalink to &quot;7. 资源利用率&quot;">​</a></h3><ul><li>服务器资源的使用程度，比如服务器（应用、服务器）的 CPU 利用率，内存利用率，磁盘利用率，网络带宽利用率</li><li>一般不超过 80%</li></ul>',65),o=[t];function h(n,s,u,d,c,q){return l(),i("div",null,o)}const p=a(r,[["render",h]]);export{_ as __pageData,p as default};
