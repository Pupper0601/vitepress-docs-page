import{_ as e,o as a,c as t,Q as l}from"./chunks/framework.1b72a0e7.js";const m=JSON.parse('{"title":"三、高级技巧","description":"","frontmatter":{},"headers":[],"relativePath":"test/50-Django框架技术/3-高级技巧.md","lastUpdated":1699520649000}'),i={name:"test/50-Django框架技术/3-高级技巧.md"},o=l(`<h1 id="三、高级技巧" tabindex="-1">三、高级技巧 <a class="header-anchor" href="#三、高级技巧" aria-label="Permalink to &quot;三、高级技巧&quot;">​</a></h1><h2 id="一、表单" tabindex="-1">一、表单 <a class="header-anchor" href="#一、表单" aria-label="Permalink to &quot;一、表单&quot;">​</a></h2><h3 id="_1-表单必填属性" tabindex="-1">1. 表单必填属性 <a class="header-anchor" href="#_1-表单必填属性" aria-label="Permalink to &quot;1. 表单必填属性&quot;">​</a></h3><ul><li><code>action</code> ： 提交的 URL</li><li><code>method</code> ： 请求方法， get 或者 post</li><li><code>enctype</code> ： 三种编码方式 <ul><li>application/x-www-form-urlencoded 键值对方式</li><li>multipart/form-data 二进制编码</li><li>text/plain 文本方式</li></ul></li></ul><p><img src="https://img.pupper.cn/img/20220726094632.png" alt=""></p><h3 id="_2-处理-request" tabindex="-1">2. 处理 request <a class="header-anchor" href="#_2-处理-request" aria-label="Permalink to &quot;2. 处理 request&quot;">​</a></h3><ul><li><p>判断请求方法 <code>request.method</code></p><ul><li>值是大写的 POST 、GET 、 PUT 、 DELETE</li></ul></li><li><p>获取 post 表单数据 <code>request.POST[key]</code> 或者 <code>request.POST.get()</code></p><ul><li><p>request.POST 返回的是一个字典</p><p><img src="https://img.pupper.cn/img/20220726094702.png" alt=""></p></li></ul></li></ul><h2 id="二、-django-安全策略" tabindex="-1">二、 Django 安全策略 <a class="header-anchor" href="#二、-django-安全策略" aria-label="Permalink to &quot;二、 Django 安全策略&quot;">​</a></h2><h3 id="_1-csrf-防御机制" tabindex="-1">1. CSRF 防御机制 <a class="header-anchor" href="#_1-csrf-防御机制" aria-label="Permalink to &quot;1. CSRF 防御机制&quot;">​</a></h3><p><code>settings.py</code> 文件</p><p><img src="https://img.pupper.cn/img/20220726094725.png" alt=""></p><p><strong>CSRF</strong> : 跨站请求伪造，是一个常见的网络攻击手段。</p><p>Django 默认为开启了 防范 CSRF 攻击机制。</p><p>对于 GET 请求，一般来说没有这个问题，CSRF 通常是针对 POST 或 PUT 方法的。</p><h3 id="_2-处理方式" tabindex="-1">2. 处理方式 <a class="header-anchor" href="#_2-处理方式" aria-label="Permalink to &quot;2. 处理方式&quot;">​</a></h3><ol><li><p>将防御机制注释</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>使用 <code>@csrf_exempt</code> 装饰器</p><p><img src="https://img.pupper.cn/img/20220726094757.png" alt=""></p></li><li><p>在表单内部加上 <code>{%csrf_token%}</code></p><p><img src="https://img.pupper.cn/img/20220726094820.png" alt=""></p></li></ol><h2 id="三、-请求的重定向" tabindex="-1">三、 请求的重定向 <a class="header-anchor" href="#三、-请求的重定向" aria-label="Permalink to &quot;三、 请求的重定向&quot;">​</a></h2><ul><li><p>http 重定向</p><ul><li>把原本访问 A 的请求 转给 B</li><li>状态码 ： 301（永久重定向） 302（临时重定向）</li></ul></li><li><p>Django 快捷方法</p><ul><li><p>redirect（视图，参数） 对应状态码 302</p><p><img src="https://img.pupper.cn/img/20220726094846.png" alt=""></p></li></ul></li></ul><p><img src="https://img.pupper.cn/img/20220726094915.png" alt=""></p><h2 id="四、-django-单元测试" tabindex="-1">四、 Django 单元测试 <a class="header-anchor" href="#四、-django-单元测试" aria-label="Permalink to &quot;四、 Django 单元测试&quot;">​</a></h2><p>Django 的单元测试采用 Python 的标准模块：<code>unittest</code> 。 该模块以类的形式定义测试。</p><ul><li>主要测试对象：数据模型</li><li>运行方法：<code>python manage.py test</code></li><li>测试文件： app 目录下的 <code>test.py</code></li></ul>`,22),p=[o];function n(r,s,c,d,h,u){return a(),t("div",null,p)}const _=e(i,[["render",n]]);export{m as __pageData,_ as default};
