import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.1b72a0e7.js";const C=JSON.parse('{"title":"十八、异步编程 asyncio","description":"","frontmatter":{},"headers":[],"relativePath":"编程语言/01.Python基础/18.异步.md","lastUpdated":1700044566000}'),p={name:"编程语言/01.Python基础/18.异步.md"},o=l(`<h1 id="十八、异步编程-asyncio" tabindex="-1">十八、异步编程 asyncio <a class="header-anchor" href="#十八、异步编程-asyncio" aria-label="Permalink to &quot;十八、异步编程 asyncio&quot;">​</a></h1><h2 id="一-概念识别" tabindex="-1">一. 概念识别 <a class="header-anchor" href="#一-概念识别" aria-label="Permalink to &quot;一. 概念识别&quot;">​</a></h2><p><strong>阻塞:</strong> A 调用 B, A 会被挂起, 一直等待 B 的结果, 什么都不干.</p><p><strong>非阻塞:</strong> A 调用 B, A 自己不用被挂起来等待 B 的结果, A 可以去干其他事情.</p><p><strong>同步:</strong> A 调用 B, 此时只有等 B 有了结果才返回. <em>同步意味着有序</em></p><p><strong>异步:</strong> A 调用 B, B 立即返回, 无需等待, 等 B 处理完之后再告诉 A 结果. <em>异步意味着无序</em></p><p><strong>并发:</strong> 为了让独立的子任务能够尽快完成.</p><p><strong>并行:</strong> 为了利用多核加速多任务的完成.</p><p><strong>事件循环:</strong> 并非真正的循环, 而是线程不断从事件列表中取事件的动作.</p><p><strong>回调:</strong></p><ul><li><strong>同步回调:</strong> 一种 <code>阻塞式调用</code>, 需要等待调用事件返回.</li><li><strong>回调:</strong> 一种 <code>双向调用模式</code>, 被调用方调用时也会调用对方.</li><li><strong>异步回调:</strong> 一种类似消息或事件的机制, 即收到某种信息时, 会主动通知调用方.</li></ul><h2 id="二-协程" tabindex="-1">二. 协程 <a class="header-anchor" href="#二-协程" aria-label="Permalink to &quot;二. 协程&quot;">​</a></h2><h3 id="_2-1-协程" tabindex="-1">2.1 协程 <a class="header-anchor" href="#_2-1-协程" aria-label="Permalink to &quot;2.1 协程&quot;">​</a></h3><p><strong>协程(coroutine):</strong> 又称微线程, 一种用户态的轻量级线程. <strong>协程(coroutine):</strong> 又称微线程, 一种用户态的轻量级线程.</p><p><strong>async:</strong> 用来定义协程的关键字.</p><p><strong>await:</strong> 等待到对象的返回结果，才会继续执行后续代码.</p><div class="language-Python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 打印 hello 等待 1s 后打印 python</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">demo1</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">python</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">demo1</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-2-asyncio-库" tabindex="-1">2.2 asyncio 库 <a class="header-anchor" href="#_2-2-asyncio-库" aria-label="Permalink to &quot;2.2 asyncio 库&quot;">​</a></h3><p><strong>asyncio 三种主要机制</strong>:</p><ul><li><code>asyncio.run()</code>: 函数用来运行最高层级的入口点 &quot;main()&quot; 函数.</li><li>等待一个协程.</li><li><code>asyncio.create_task()</code>: 函数用来并发运行作为 asyncio 任务 的多个协程。</li></ul><div class="language-Python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 等待 1 秒后打印 &quot;hello&quot;，然后 再次 等待 2 秒后打印 &quot;world&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say_after</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">delay</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">what</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">delay</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">what</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    start_time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say_after</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say_after</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    end_time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;耗时: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">end_time </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> start_time</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">运行结果:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">hello</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">world</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">耗时: 3.003185987472534</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say_after</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">delay</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">what</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">delay</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">what</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    task1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create_task</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">say_after</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    task2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create_task</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">say_after</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Python</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    start_time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> task1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> task2</span></span>
<span class="line"><span style="color:#A6ACCD;">    end_time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;耗时: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">end_time </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> start_time</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">运行结果:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">hello</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">Python</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">耗时: 2.001649856567383</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="_2-2-1-运行-asyncio-程序-run" tabindex="-1">2.2.1 运行 asyncio 程序: <code>run()</code> <a class="header-anchor" href="#_2-2-1-运行-asyncio-程序-run" aria-label="Permalink to &quot;2.2.1 运行 asyncio 程序: \`run()\`&quot;">​</a></h4><ul><li><code>asyncio.run(coro, *, debug=False)</code><ul><li>运行传入的协程，负责管理 asyncio 事件循环，终结异步生成器，并关闭线程池。</li><li>用作 asyncio 程序的主入口点，理想情况下应当只被调用一次。</li></ul></li></ul><div class="language-Python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-2-2-创建任务-create-task" tabindex="-1">2.2.2 创建任务: <code>create_task()</code> <a class="header-anchor" href="#_2-2-2-创建任务-create-task" aria-label="Permalink to &quot;2.2.2 创建任务: \`create_task()\`&quot;">​</a></h4><ul><li><code>asyncio.create_task(coro, *, name=None)</code><ul><li>将协程添加到 <code>asyncio.create_task()</code> 中，则该协程将很快的自动计划运行。</li><li>将 coro 协程 封装为一个 Task 并调度其执行。返回 Task 对象。</li></ul></li></ul><h4 id="_2-2-3-休眠-sleep" tabindex="-1">2.2.3 休眠: <code>sleep()</code> <a class="header-anchor" href="#_2-2-3-休眠-sleep" aria-label="Permalink to &quot;2.2.3 休眠: \`sleep()\`&quot;">​</a></h4><ul><li><code>asyncio.sleep(delay, result=None, *, loop=None)</code><ul><li>阻塞 delay 指定的秒数。</li><li>如果指定了 result，则当协程完成时将其返回给调用者。</li><li>sleep() 总是会挂起当前任务，以允许其他任务运行。</li></ul></li></ul><div class="language-Python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 运行 5 秒，每秒显示一次当前日期:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> datetime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">display_date</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    loop </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_running_loop</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    end_time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> loop</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">datetime</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">datetime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">loop</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> end_time</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">display_date</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_2-2-4-并发运行任务-wait-、gather" tabindex="-1">2.2.4 并发运行任务: <code>wait()、gather()</code> <a class="header-anchor" href="#_2-2-4-并发运行任务-wait-、gather" aria-label="Permalink to &quot;2.2.4 并发运行任务: \`wait()、gather()\`&quot;">​</a></h4><p><strong>相同</strong>：<code>asyncio.wait</code> 和 <code>asyncio.gather</code> 实现的效果是相同的，都是把所有 Task 任务结果收集起来。</p><p><strong>不同</strong>：</p><ul><li><code>asyncio.wait</code> 会返回两个值：done 和 pending， <ul><li>done 为已完成的协程 Task，</li><li>pending 为超时未完成的协程 Task，需通过 future.result 调用 Task 的 result；</li></ul></li><li><code>asyncio.gather</code> 返回的是所有已完成 Task 的 result，不需要再进行调用或其他操作，就可以得到全部结果。</li></ul><div class="language-Python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> arrow</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">current_time</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 获取当前时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    cur_time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arrow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Asia/Shanghai</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YYYY-MM-DD HH:mm:ss</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> cur_time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sleep_time</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    func_name_suffix </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sleep_time     </span><span style="color:#676E95;font-style:italic;"># 使用 sleep_time（函数 I/O 等待时长）作为函数名后缀，以区分任务对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;[</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">current_time</span><span style="color:#89DDFF;">()</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">] 执行异步函数 </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__name__</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">func_name_suffix</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sleep_time</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;[</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">current_time</span><span style="color:#89DDFF;">()</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">] 函数 </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__name__</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">func_name_suffix</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> 执行完毕&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;【[</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">current_time</span><span style="color:#89DDFF;">()</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">] 得到函数 </span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__name__</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">func_name_suffix</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> 执行结果】&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    task_list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        task </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create_task</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        task_list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">task</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># asyncio.gather 返回的是所有已完成 Task 的 result</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># results = await asyncio.gather(*task_list)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># for result in results:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">#     print(f&quot;[{current_time()}] 得到执行结果 {result}&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># asyncio.wait 会返回两个值：done 和 pending</span></span>
<span class="line"><span style="color:#A6ACCD;">    done</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pending </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">task_list</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> done</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;[</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">current_time</span><span style="color:#89DDFF;">()</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">] 得到执行结果 </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">()</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">运行结果:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:00] 执行异步函数 func-0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:00] 执行异步函数 func-1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:00] 执行异步函数 func-2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:00] 执行异步函数 func-3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:00] 执行异步函数 func-4</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:00] 函数 func-0 执行完毕</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:01] 函数 func-1 执行完毕</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:02] 函数 func-2 执行完毕</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:03] 函数 func-3 执行完毕</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:04] 函数 func-4 执行完毕</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:04] 得到执行结果 【[2023-04-27 14:29:04] 得到函数 func-4 执行结果】</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:04] 得到执行结果 【[2023-04-27 14:29:02] 得到函数 func-2 执行结果】</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:04] 得到执行结果 【[2023-04-27 14:29:03] 得到函数 func-3 执行结果】</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:04] 得到执行结果 【[2023-04-27 14:29:01] 得到函数 func-1 执行结果】</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[2023-04-27 14:29:04] 得到执行结果 【[2023-04-27 14:29:00] 得到函数 func-0 执行结果】</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h4 id="_2-2-5-防止取消操作-shield" tabindex="-1">2.2.5 防止取消操作: <code>shield()</code> <a class="header-anchor" href="#_2-2-5-防止取消操作-shield" aria-label="Permalink to &quot;2.2.5 防止取消操作: \`shield()\`&quot;">​</a></h4><ul><li><code>asyncio.shield(aw, *, loop=None)</code><ul><li>保护一个 可等待对象 防止其被 取消</li></ul></li></ul><div class="language-Python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shield</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">something</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-2-6-超时-wait-for" tabindex="-1">2.2.6 超时: <code>wait_for()</code> <a class="header-anchor" href="#_2-2-6-超时-wait-for" aria-label="Permalink to &quot;2.2.6 超时: \`wait_for()\`&quot;">​</a></h4><ul><li><code>asyncio.wait_for(aw, timeout, *, loop=None)</code><ul><li>等待 aw 可等待对象 完成，指定 timeout 秒数后超时</li><li>timeout 可以为 None，也可以为 float 或 int 型数值表示的等待秒数</li><li>任务取消引发 <code>asyncio.TimeoutError</code>, 要避免任务取消，可以加上 <code>shield()</code></li></ul></li></ul><div class="language-Python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eternity</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Sleep for one hour</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3600</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yay!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 最多等待1秒</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait_for</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">eternity</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">timeout</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">except</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">TimeoutError</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">timeout!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">timeout!</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_2-2-7-task" tabindex="-1">2.2.7 Task <a class="header-anchor" href="#_2-2-7-task" aria-label="Permalink to &quot;2.2.7 Task&quot;">​</a></h4><blockquote><p><code>task</code>对象作用: 可以将多个任务添加到事件循环当中，达到多任务并发的效果</p></blockquote><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func2</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1111</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2222</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">tasks </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">func2</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func2</span><span style="color:#89DDFF;">()]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tasks</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">运行结果:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">1111</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">1111</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">2222</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">2222</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{&lt;Task finished name=&#39;Task-3&#39; coro=&lt;func2() done, defined at /Users/chengqiande/Documents/PythonObject/Demo/进程、线程、协程/多线程/Demo2/demo6.py:7&gt; result=&#39;test&#39;&gt;, &lt;Task finished name=&#39;Task-2&#39; coro=&lt;func2() done, defined at /Users/chengqiande/Documents/PythonObject/Demo/进程、线程、协程/多线程/Demo2/demo6.py:7&gt; result=&#39;test&#39;&gt;}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">set()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="_2-2-8-多线程异步执行-to-thread" tabindex="-1">2.2.8 多线程异步执行: <code>to_thread()</code> <a class="header-anchor" href="#_2-2-8-多线程异步执行-to-thread" aria-label="Permalink to &quot;2.2.8 多线程异步执行: \`to_thread()\`&quot;">​</a></h4><p><code>asyncio.to_thread()</code>: 将同步阻塞放入多线程异步执行</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> threading</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> time</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> atexit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">atexit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">lambda</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">用时(秒):</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()-</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hard_work</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">thread id:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> threading</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_ident</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">do_async_job</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to_thread</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">hard_work</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">job done!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    tasks </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        tasks</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create_task</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">do_async_job</span><span style="color:#89DDFF;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tasks</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">运行结果:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">thread id: 12936740864</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">thread id: 12953530368</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">thread id: 12970319872</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">job done!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">job done!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">job done!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">用时(秒): 6.017727851867676</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>`,47),e=[o];function t(c,r,i,y,F,D){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{C as __pageData,b as default};
