import{_ as e,o,c as t,Q as a}from"./chunks/framework.1b72a0e7.js";const k=JSON.parse('{"title":"三、scoket 网络编程技术(实战)","description":"","frontmatter":{},"headers":[],"relativePath":"test/51-测试工具开发/3-Scoket网络编程技术---实战.md","lastUpdated":1699522503000}'),c={name:"test/51-测试工具开发/3-Scoket网络编程技术---实战.md"},l=a('<h1 id="三、scoket-网络编程技术-实战" tabindex="-1">三、scoket 网络编程技术(实战) <a class="header-anchor" href="#三、scoket-网络编程技术-实战" aria-label="Permalink to &quot;三、scoket 网络编程技术(实战)&quot;">​</a></h1><h2 id="一、端口扫描的原理" tabindex="-1">一、端口扫描的原理 <a class="header-anchor" href="#一、端口扫描的原理" aria-label="Permalink to &quot;一、端口扫描的原理&quot;">​</a></h2><p>端口扫描原理 ： 尝试与目标主机建立连接，如果目标主机有回复则说明端口开放。</p><p>TCP 连接 ： 通过使用三次握手 与目标主机建立标准的 tcp 连接。这种方法更容易被发现，被目标主机记录。</p><p>实现简单，对操者权限没有严格要求</p><h2 id="二、设计方案规划" tabindex="-1">二、设计方案规划 <a class="header-anchor" href="#二、设计方案规划" aria-label="Permalink to &quot;二、设计方案规划&quot;">​</a></h2><ol><li>建立 TCP 连接</li><li>查看连接返回</li><li>判断连接返回值</li><li>循环扫描剩余端口</li></ol><h2 id="三、代码实现功能" tabindex="-1">三、代码实现功能 <a class="header-anchor" href="#三、代码实现功能" aria-label="Permalink to &quot;三、代码实现功能&quot;">​</a></h2><h3 id="socket-family-tupe" tabindex="-1"><strong><code>socket（family，tupe）</code></strong> <a class="header-anchor" href="#socket-family-tupe" aria-label="Permalink to &quot;**`socket（family，tupe）`**&quot;">​</a></h3><ul><li><p><code>family</code> ： 代表家族地址。可为 <code>AF_INET</code> 或者 <code>AF_UNIX</code></p><ul><li><code>AF_INET</code> ： 包含 <strong>Internet</strong> 地址</li><li><code>AF_UNIX</code> ： 用于同一台机器上的进程间的通信。</li></ul></li><li><p><code>type</code> ： 代表 套接字 类型。 可为 <code>SOCK_STREAM</code> 或者 <code>SOCK_DGRAM</code></p><ul><li><code>SOCK_STREAM</code> ： 流套接字， 也叫 <strong>TCP 套接字</strong></li><li><code>SOCK_DGRAM</code> ： 数据报套接字， 也叫 <strong>UDP 套接字</strong></li></ul></li><li><p>默认为 <code>family = AF_INET</code> <code>type = SOCK_STREAM</code></p></li></ul><h3 id="客户端-套接字" tabindex="-1">客户端 套接字 <a class="header-anchor" href="#客户端-套接字" aria-label="Permalink to &quot;客户端 套接字&quot;">​</a></h3><ul><li><p><code>s.connect（）</code> ： 主动初始化 TCP 服务器连接。</p><ul><li>一般 <strong>address</strong> 的格式 <strong>元组（hostname，port）</strong>，如果连接出错，返回 <strong>socket.error 错误</strong></li></ul></li><li><p><code>s.connect_ex（）</code> ： connect（） 函数的扩展版本，出错时返回出错码，而不是抛出异常。</p></li></ul>',12),i=[l];function r(s,d,n,_,h,p){return o(),t("div",null,i)}const m=e(c,[["render",r]]);export{k as __pageData,m as default};
